import React, { useEffect, useState } from 'react';
import axios from 'axios';
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import QRCode from 'qrcode';
import logo from '../assets/logo.png'; 

const EmployeeDashboard = () => {
  const [employee, setEmployee] = useState(null);
  const [salarySlips, setSalarySlips] = useState([]);
  const [loading, setLoading] = useState(true);

  const employeeId = localStorage.getItem("employeeId");

  useEffect(() => {
    if (employeeId) {
      fetchEmployeeDetails(employeeId);
      fetchSalarySlips(employeeId);
    }
  }, [employeeId]);

  const fetchEmployeeDetails = async (id) => {
    try {
      const res = await axios.get(`http://localhost:8000/api/employees/${id}`);
      setEmployee(res.data);
    } catch (error) {
      console.error("Failed to fetch employee details:", error);
    } finally {
      setLoading(false);
    }
  };

  const fetchSalarySlips = async (id) => {
    try {
      const res = await axios.get(`http://localhost:8000/api/salary-slips/${id}`);
      setSalarySlips(res.data);
    } catch (error) {
      console.error("Failed to fetch salary slips:", error);
    }
  };

  const downloadCustomPDF = async (slip, employeeId, employeeName, userEmail) => {
    const doc = new jsPDF();

    const basicSalary = slip.amount;
    const hra = Math.round(basicSalary * 0.2);
    const pf = Math.round(basicSalary * 0.12);
    const tax = Math.round(basicSalary * 0.1);
    const deductions = 500;
    const netSalary = basicSalary + hra - pf - tax - deductions;

    const imgData = await new Promise((resolve, reject) => {
      const img = new Image();
      img.src = logo;
      img.onload = () => {
        const canvas = document.createElement('canvas');
        canvas.width = img.width;
        canvas.height = img.height;
        const ctx = canvas.getContext('2d');
        ctx.drawImage(img, 0, 0);
        resolve(canvas.toDataURL('image/png'));
      };
      img.onerror = reject;
    });

    doc.addImage(imgData, 'PNG', 15, 10, 30, 30);

    doc.setFontSize(20);
    doc.text('Salary Slip', 105, 25, null, null, 'center');

    const pageWidth = doc.internal.pageSize.getWidth();
    const textLines = [
      'Pravi Pvt. Ltd.',
      '123 Innovation Park, Pune, Maharashtra - 411001',
      'hr@pravi.com | +91-9876543210',
    ];

    doc.setFontSize(10);
    let startY = 12;
    textLines.forEach((line) => {
      const textWidth = doc.getTextWidth(line);
      const xPos = pageWidth - textWidth - 15;
      doc.text(line, xPos, startY);
      startY += 6;
    });

    doc.setFontSize(12);
    doc.text(`Employee ID: ${employeeId}`, 15, 50);
    doc.text(`Name: ${employeeName}`, 15, 58);
    doc.text(`Email: ${userEmail}`, 15, 66);
    doc.text(`Month: ${slip.month}`, 15, 74);
    doc.text(`Year: ${slip.year}`, 15, 82);
    doc.text(`Date Issued: ${new Date().toLocaleDateString()}`, 15, 90);

    autoTable(doc, {
      startY: 100,
      head: [['Component', 'Amount (₹)', 'Deductions', 'Amount (₹)']],
      body: [
        ['Basic Salary', basicSalary, 'Tax (10%)', tax],
        ['HRA (20%)', hra, 'PF (12%)', pf],
        ['', '', 'Other Deductions', deductions],
        ['Net Pay', netSalary, '', ''],
      ],
      styles: { halign: 'center' },
      headStyles: {
        fillColor: [41, 128, 185],
        textColor: 255,
        fontSize: 12,
      },
      theme: 'grid',
    });

    doc.setFontSize(12);
    doc.text('Authorized Signature:', 15, 230);
    doc.line(60, 230, 130, 230);

    const qrData = `Employee ID: ${employeeId}\nMonth: ${slip.month} ${slip.year}\nNet Pay: ₹${netSalary}`;
    const qrImageUrl = await QRCode.toDataURL(qrData);
    doc.addImage(qrImageUrl, 'PNG', 160, 220, 30, 30);

    doc.setFontSize(10);
    doc.text('Generated by Employee Directory System', 15, 285);

    doc.save(`SalarySlip_${slip.month}_${slip.year}.pdf`);
  };

  if (loading) return <div className="container mt-5">Loading...</div>;

  if (!employee) {
    return <div className="container mt-5 text-danger">Employee details not found.</div>;
  }

  return (
    <div className="container mt-5">
      <h2>Welcome, {employee.name}</h2>

      <div className="card my-3">
        <div className="card-body d-flex align-items-start justify-content-between">
          <div>
            <p><strong>Employee ID:</strong> {employee.id}</p>
            <p><strong>Email:</strong> {employee.email}</p>
            <p><strong>Phone:</strong> {employee.phone}</p>
            <p><strong>Department:</strong> {employee.department_name}</p>
            <p><strong>Role:</strong> {employee.role}</p>
            <p><strong>Bio:</strong> {employee.bio}</p>
          </div>
          {employee.profile_pic && (
            <img
              src={`http://localhost:8000/uploads/${employee.profile_pic}`}
              alt="Profile"
              className="img-thumbnail ms-4"
              style={{ width: '150px', height: '150px', objectFit: 'cover' }}
            />
          )}
        </div>
      </div>

      {salarySlips.length > 0 ? (
        <ul className="list-group">
          {salarySlips.map((slip) => (
            <li key={slip.id} className="list-group-item d-flex justify-content-between align-items-center">
              {slip.month} {slip.year} - ₹{slip.amount}
              <button
                className="btn btn-sm btn-outline-primary"
                onClick={() => downloadCustomPDF(slip, employee.id, employee.name, employee.email)}
              >
                Download
              </button>
            </li>
          ))}
        </ul>
      ) : (
        <p>No salary slips available.</p>
      )}
    </div>
  );
};

export default EmployeeDashboard;
